
@{
    ViewBag.Title = "Simon Says";
    Layout = "~/Views/Shared/_GameLayout.cshtml";
    ViewBag.GameName = "Simon Says";
    ViewBag.ShowGameRanking = true;
}

<h1 class="text-center">Simon Says 3x3</h1>
<h4 class="text-center">Poziom: <span id="levelDisplay">0</span></h4>
<h4 class="text-center">Punkty: <span id="pointsDisplay">0</span></h4>

<p class="text-center">Zapamiętaj i powtórz sekwencję</p>

<div class="text-center mt-2 mb-3">
    <p id="countdown" style="font-size: 1.5em; color: darkred;"></p>
</div>

<div class="d-flex justify-content-center">
    <div id="grid" style="display: grid; grid-template-columns: repeat(3,100px);gap:10px;">
        @for (int i =0; i < 9; i++)
            {
                <div class="cell" data-id="@i" style="width: 100px; height: 100px; background-color: lightgray; border: 1px solid #333;"></div>
            }
    </div>
</div>

<div class="text-center mt-3">
    <button id="startBtn" class="btn btn-primary">Start</button>
    <p id="status" class="mt-2">Kliknij Start żeby zacząć</p>
    <p id="timer" class="mt-1 text-muted text-center"></p>
</div>

<script>
    const grid = document.querySelectorAll('.cell');
    const startBtn = document.getElementById('startBtn');
    const status = document.getElementById('status');
    const levelDisplay = document.getElementById('levelDisplay');
    const countdown = document.getElementById('countdown');

    let sequence = [];
    let playerSequence = [];
    let level = 0;
    let clickable = false;
    let animating = false;
    let responseTimer = null;
    let points = 0;
    let timeLeft = 0;
    let timerInterval;
    let currentClickPoints = 10;

    function getTimeLimitForLevel(lvl) {
        return 3000 + level * 1000; 
    }
    function flash(cell) {
        animating = true;
        cell.style.backgroundColor = 'pink';
        setTimeout(() => {
            cell.style.backgroundColor = 'lightgray';
            animating = false;
        }, 300)
    }

    function playSequence() {
        clickable = false;
        animating = true;
        let i = 0;
        const interval = setInterval(() => {
            flash(grid[sequence[i]]);
            i++;
            if (i >= sequence.length) {
                clearInterval(interval);
                setTimeout(() => {
                    clickable = true;
                    playerSequence = [];
                    status.textContent = `Twoja kolej!`;
                    startResponseTimer();
                    animating = false;
                }, 500);
            }
        }, 600);
    }
    function nextRound() {
        level++;
        currentClickPoints = 10;
        updateLevelDisplay();
        status.textContent = `Poziom ${level}`;
        sequence.push(Math.floor(Math.random() * 9));
        setTimeout(playSequence, 600);
    }

    function updateLevelDisplay() {
        levelDisplay.textContent = level;
    }

    function startGame() {
        startBtn.disabled = true;
        sequence = [];
        level = 0;
        points = 0;
        currentClickPoints = 10;
        updateLevelDisplay();
        updatePointsDisplay();
        status.textContent = "";
        countdownStart(3); 
    }

    function countdownStart(seconds) {
        let counter = seconds;
        countdown.textContent = `Start za ${counter}...`;
        const interval = setInterval(() => {
            counter--;
            if (counter <= 0) {
                clearInterval(interval);
                countdown.textContent = "";
                nextRound();
            } else {
                countdown.textContent = `Start za ${counter}...`;
            }
        }, 1000);
    }

    function startResponseTimer() {
        clearTimeout(responseTimer);
        clearInterval(timerInterval);

        const timeLimit = getTimeLimitForLevel(level);
        timeLeft = timeLimit / 1000;
        const timerElement = document.getElementById("timer");

        timerElement.textContent = `Masz ${timeLeft.toFixed(1)}s na odpowiedź`;

        timerInterval = setInterval(() => {
            timeLeft -= 0.1;
            if (timeLeft <= 0 || !clickable) {
                clearInterval(timerInterval);
                timerElement.textContent = "";
            } else {
                timerElement.textContent = `Masz ${timeLeft.toFixed(1)}s na odpowiedź`;
            }
        }, 100);

        responseTimer = setTimeout(() => {
            clearInterval(timerInterval);
            timerElement.textContent = "";
            status.textContent = `Czas minął! Twój wynik: ${level - 1}`;
            clickable = false;
            startBtn.disabled = false;
        }, timeLimit);
    }

    function stopResponseTimer() {
        clearTimeout(responseTimer);
    }

    startBtn.onclick = () => {
        startGame();
    };

    grid.forEach(cell => {
        cell.onclick = () => {
            if (!clickable) return;

            const id = parseInt(cell.dataset.id);

            if (id !== sequence[playerSequence.length]) {
                status.textContent = `Błąd! Twój wynik: ${level - 1}`;
                clickable = false;
                stopResponseTimer();
                document.getElementById("timer").textContent = "";
                startBtn.disabled = false;
                return;
            }

            flash(cell);
            addFloatingPoints(cell, currentClickPoints);
            points += currentClickPoints;
            currentClickPoints += 10;
            updatePointsDisplay();

            playerSequence.push(id);

            stopResponseTimer();

            if (playerSequence.length === sequence.length) {
                clickable = false;

                try {
                    const maxTime = getTimeLimitForLevel(level) / 1000;
                    const bonus = Math.floor((timeLeft / maxTime) * 500);

                    const gridContainer = document.getElementById("grid");
                    addFloatingPoints(gridContainer, bonus);
                    points += bonus;
                    updatePointsDisplay();
                } catch (e) {
                    console.warn("Błąd w bonusie za czas:", e);
                }

                setTimeout(nextRound, 800); 
            }
        };
    });

    function updatePointsDisplay() {
        document.getElementById("pointsDisplay").textContent = `Punkty: ${points}`;
    }

    function addFloatingPoints(cell, value) {
        const pointsText = document.createElement("div");
        pointsText.textContent = `+${value}`;
        pointsText.style.position = "absolute";

        const rect = cell.getBoundingClientRect();

        pointsText.style.left = rect.left + rect.width / 2 + window.scrollX - 20 + "px";
        pointsText.style.top = rect.top + rect.height/2 + window.scrollY -20 + "px";

        pointsText.style.color = "green";
        pointsText.style.fontWeight = "bold";
        pointsText.style.fontSize = "16px";
        pointsText.style.zIndex = 1000;
        pointsText.style.transition = "all 1s ease-out";
        pointsText.style.pointerEvents = "none";
        pointsText.style.transform = `rotate(${Math.floor(Math.random() * 20 - 10)}deg)`;
        document.body.appendChild(pointsText);

        setTimeout(() => {
            pointsText.style.transform += " translateY(-40px)";
            pointsText.style.opacity = "0";
        }, 50);
        setTimeout(() => {
            pointsText.remove();
        }, 1200);
    }
</script>